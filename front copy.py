import streamlit as st
import requests
from PIL import Image
import io

# URL to use for testing the deployed container
# API_URL = "https://fake-news-image-863060191445.europe-west1.run.app/predict"

# URL to use for local testing image
API_URL = "http://localhost:8000/predict_image"

# URL for the text-based fake news prediction
API_URL_TEXT = "http://localhost:8000/predict_text"

st.title("Fake News Detector")
st.header("Check if an image or text is fake.")
st.write("""
As part of this challenge, you can use this app to determine:
1. Whether an image is generated by AI.
2. Whether a news is fake or real.
""")

# Tabs for different functionalities
tab1, tab2 = st.tabs(["Image Prediction", "Text Prediction"])

# Tab 1: Image Prediction
with tab1:
    st.subheader("Fake Image Check")
    st.write("Upload an image to check if it is AI-generated or real.")
    uploaded_file = st.file_uploader("Choose an image", type=["jpg", "jpeg", "png", "gif"])

    if uploaded_file is not None:
        st.write(f"Uploaded file type: {uploaded_file.type}")

        image = Image.open(uploaded_file)
        st.image(image, caption='Uploaded Image', use_column_width=True)

        img_bytes = io.BytesIO()
        image.save(img_bytes, format='PNG')
        img_bytes = img_bytes.getvalue()

        if st.button("Predict Image"):

            response = requests.post(API_URL, files={"file": ("image.png", img_bytes, "image/png")})

            if response.status_code == 200:
                prediction = response.json().get("prediction")
                confidence = response.json().get("confidence")
                
                if prediction == "sd":
                    prediction_name = "Stable Diffusion"
                elif prediction == "dalle":
                    prediction_name = "DALL-E"
                elif prediction == "mj":
                    prediction_name = "Mid Journey"
                else:
                    prediction_name = "real"
                
                if prediction == "real":
                    st.success(f"This image seems to be real üëçüèª")   
                else:
                    st.success(f"This image seems to be fake ü§ñ‚öôÔ∏èü§ñ and produced by {prediction_name}")
                st.write(f"And we are {confidence*100:.2f}% confident ü¶æ")
            
            else:
                st.error(f"Failed to get prediction. Status code: {response.status_code}")
                st.write(response.text)

# Tab 2: Text Prediction
with tab2:
    st.subheader("Fake News Text Check")
    st.write("Enter a news headline to check if it is fake or real.")

    user_text = st.text_area("Enter the news headline here:")

    if st.button("Predict Text"):
        if not user_text.strip():
            st.warning("Please enter a valid text headline.")
        else:
            response = requests.post(API_URL_TEXT, json={"text": user_text})

            if response.status_code == 200:
                prediction = response.json().get("prediction")
                confidence = response.json().get("confidence")
                
                if prediction == "Fake News":
                    st.error(f"This news headline seems to be fake! üì∞‚ùå")
                else:
                    st.success(f"This news headline seems to be real! üì∞‚úÖ")
                st.write(f"Confidence: {confidence*100:.2f}%")
            else:
                st.error(f"Failed to get prediction. Status code: {response.status_code}")
                st.write(response.text)